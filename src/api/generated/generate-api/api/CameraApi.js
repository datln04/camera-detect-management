/**
 * DressUpExchange-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddCameraRequest from '../model/AddCameraRequest';
import CameraInformationResponseIQueryableRestDTO from '../model/CameraInformationResponseIQueryableRestDTO';
import CameraInformationResponseRestDTO from '../model/CameraInformationResponseRestDTO';
import DetectResponseRestDTO from '../model/DetectResponseRestDTO';
import TakeAlarmRequest from '../model/TakeAlarmRequest';
import TakeElectricalIncidentRequest from '../model/TakeElectricalIncidentRequest';

/**
* Camera service.
* @module api/CameraApi
* @version v1
*/
export default class CameraApi {

    /**
    * Constructs a new CameraApi. 
    * @alias module:api/CameraApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cameraGet operation.
     * @callback module:api/CameraApi~cameraGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CameraInformationResponseIQueryableRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CameraApi~cameraGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CameraInformationResponseIQueryableRestDTO}
     */
    cameraGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CameraInformationResponseIQueryableRestDTO;
      return this.apiClient.callApi(
        '/Camera', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cameraIdDelete operation.
     * @callback module:api/CameraApi~cameraIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CameraInformationResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CameraApi~cameraIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CameraInformationResponseRestDTO}
     */
    cameraIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cameraIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CameraInformationResponseRestDTO;
      return this.apiClient.callApi(
        '/Camera/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cameraIdDetectPost operation.
     * @callback module:api/CameraApi~cameraIdDetectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/TakeAlarmRequest} opts.takeAlarmRequest 
     * @param {module:api/CameraApi~cameraIdDetectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectResponseRestDTO}
     */
    cameraIdDetectPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['takeAlarmRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cameraIdDetectPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DetectResponseRestDTO;
      return this.apiClient.callApi(
        '/Camera/{id}/detect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cameraIdDisconnectPost operation.
     * @callback module:api/CameraApi~cameraIdDisconnectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CameraApi~cameraIdDisconnectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectResponseRestDTO}
     */
    cameraIdDisconnectPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cameraIdDisconnectPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DetectResponseRestDTO;
      return this.apiClient.callApi(
        '/Camera/{id}/disconnect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cameraIdPatch operation.
     * @callback module:api/CameraApi~cameraIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CameraInformationResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/AddCameraRequest} opts.addCameraRequest 
     * @param {module:api/CameraApi~cameraIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CameraInformationResponseRestDTO}
     */
    cameraIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['addCameraRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cameraIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CameraInformationResponseRestDTO;
      return this.apiClient.callApi(
        '/Camera/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cameraIdRecordPost operation.
     * @callback module:api/CameraApi~cameraIdRecordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/TakeElectricalIncidentRequest} opts.takeElectricalIncidentRequest 
     * @param {module:api/CameraApi~cameraIdRecordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectResponseRestDTO}
     */
    cameraIdRecordPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['takeElectricalIncidentRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cameraIdRecordPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DetectResponseRestDTO;
      return this.apiClient.callApi(
        '/Camera/{id}/record', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cameraPost operation.
     * @callback module:api/CameraApi~cameraPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CameraInformationResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AddCameraRequest} opts.addCameraRequest 
     * @param {module:api/CameraApi~cameraPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CameraInformationResponseRestDTO}
     */
    cameraPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['addCameraRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CameraInformationResponseRestDTO;
      return this.apiClient.callApi(
        '/Camera', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
