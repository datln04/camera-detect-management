/**
 * DressUpExchange-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionProcessResponseRestDTO from '../model/ActionProcessResponseRestDTO';
import AddRecordActionRequest from '../model/AddRecordActionRequest';
import RateAlarmRequest from '../model/RateAlarmRequest';
import RecordDetailResponseRestDTO from '../model/RecordDetailResponseRestDTO';
import RecordResponsePagedResultRestDTO from '../model/RecordResponsePagedResultRestDTO';
import SortOrder from '../model/SortOrder';
import VoteAlarmResponseRestDTO from '../model/VoteAlarmResponseRestDTO';

/**
* Record service.
* @module api/RecordApi
* @version v1
*/
export default class RecordApi {

    /**
    * Constructs a new RecordApi. 
    * @alias module:api/RecordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recordGet operation.
     * @callback module:api/RecordApi~recordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordResponsePagedResultRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {module:model/SortOrder} opts.sortType 
     * @param {String} opts.colName 
     * @param {String} opts.cameraId 
     * @param {Date} opts.firstDate 
     * @param {Date} opts.lastDate 
     * @param {module:api/RecordApi~recordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordResponsePagedResultRestDTO}
     */
    recordGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Page': opts['page'],
        'PageSize': opts['pageSize'],
        'SortType': opts['sortType'],
        'ColName': opts['colName'],
        'CameraId': opts['cameraId'],
        'FirstDate': opts['firstDate'],
        'LastDate': opts['lastDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecordResponsePagedResultRestDTO;
      return this.apiClient.callApi(
        '/Record', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordRecordIdActionPost operation.
     * @callback module:api/RecordApi~recordRecordIdActionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionProcessResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} recordId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AddRecordActionRequest} opts.addRecordActionRequest 
     * @param {module:api/RecordApi~recordRecordIdActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionProcessResponseRestDTO}
     */
    recordRecordIdActionPost(recordId, opts, callback) {
      opts = opts || {};
      let postBody = opts['addRecordActionRequest'];
      // verify the required parameter 'recordId' is set
      if (recordId === undefined || recordId === null) {
        throw new Error("Missing the required parameter 'recordId' when calling recordRecordIdActionPost");
      }

      let pathParams = {
        'RecordId': recordId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ActionProcessResponseRestDTO;
      return this.apiClient.callApi(
        '/Record/{RecordId}/action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordRecordIdGet operation.
     * @callback module:api/RecordApi~recordRecordIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDetailResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} recordId 
     * @param {module:api/RecordApi~recordRecordIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDetailResponseRestDTO}
     */
    recordRecordIdGet(recordId, callback) {
      let postBody = null;
      // verify the required parameter 'recordId' is set
      if (recordId === undefined || recordId === null) {
        throw new Error("Missing the required parameter 'recordId' when calling recordRecordIdGet");
      }

      let pathParams = {
        'recordId': recordId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecordDetailResponseRestDTO;
      return this.apiClient.callApi(
        '/Record/{recordId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordRecordIdVotePost operation.
     * @callback module:api/RecordApi~recordRecordIdVotePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoteAlarmResponseRestDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} recordId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RateAlarmRequest} opts.rateAlarmRequest 
     * @param {module:api/RecordApi~recordRecordIdVotePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoteAlarmResponseRestDTO}
     */
    recordRecordIdVotePost(recordId, opts, callback) {
      opts = opts || {};
      let postBody = opts['rateAlarmRequest'];
      // verify the required parameter 'recordId' is set
      if (recordId === undefined || recordId === null) {
        throw new Error("Missing the required parameter 'recordId' when calling recordRecordIdVotePost");
      }

      let pathParams = {
        'RecordId': recordId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = VoteAlarmResponseRestDTO;
      return this.apiClient.callApi(
        '/Record/{RecordId}/vote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
